version: 2.1

parameters:
  gio_action:
    type: enum
    enum: [release, dry_release, nexus_staging, publish_bundles, publish_rpms, publish_docs, cicd_test_gpg, blank]
    default: blank
  gio_release_version:
    type: string
    default: $GIO_RELEASE_VERSION
  dry_run:
    type: boolean
    default: true
    description: "Run Continuous Deployment of https://docs.gravitee.io in Dry Run Mode ? (if set to true, will actually trigger)"
  # -- Entreprise Edition Package Bundle related params.
  with_ee:
    type: boolean
    default: true
    description: "Run the Package Bundle for Entreprise Edition?"
  ae_version:
    type: string
    default: $AE_VERSION
    description: "The Gravitee.io version number of Alert Engine"
  license_version:
    type: string
    default: $LICENSE_VERSION
    description: "The Gravitee.io version number of the Gravitee.io EE License "
  notifier_slack_version:
    type: string
    default: $NOTIFIER_SLACK_VERSION
    description: "The Gravitee.io version number of the Gravitee.io EE Slack Notifier Plugin"
  notifier_webhook_version:
    type: string
    default: $NOTIFIER_WEBHOOK_VERSION
    description: "The Gravitee.io version number of the Gravitee.io EE Webhook Notifier Plugin"
  notifier_email_version:
    type: string
    default: $NOTIFIER_EMAIL_VERSION
    description: "The Gravitee.io version number of the Gravitee.io EE Email Notifier Plugin"

orbs:
  secrethub: secrethub/cli@1.0.0
  gravitee: gravitee-io/gravitee@dev:1.0.4
jobs:
  empty_job:
    docker:
     - image: alpine
    resource_class: small
    working_directory: /mnt/ramdisk
    steps:
      - run:
          name: "This is a blank job"
          command: echo "No task is executed."

  dry_run_orchestrator:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      SECRETHUB_ORG: graviteeio
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - gravitee/nexus_staging_prepare_bucket:
          dry_run: true
          maven_container_image_tag: stable-latest
          maven_profile_id: gio-release
          secrethub_org: graviteeio
          secrethub_repo: cicd

      - run:
          name: "Docker pull"
          command: |
                    docker pull quay.io/gravitee-lab/cicd-orchestrator:stable-latest
      - run:
          name: "Running the Gio CICD Orchestrator as docker container"
          command: |
                    echo "Checking pipeline env. : "
                    ls -allh
                    export GITHUB_ORG=gravitee-io
                    export SECRETHUB_ORG=graviteeio
                    export SECRETHUB_REPO=cicd
                    export MAVEN_PROFILE_ID='gio-release'
                    echo "GITHUB_ORG=${GITHUB_ORG}"
                    echo "SECRETHUB_ORG=${SECRETHUB_ORG}"
                    echo "SECRETHUB_REPO=${SECRETHUB_REPO}"
                    echo "MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    # checking docker image pulled in previous step is there
                    docker images
                    # --> .secrets.json is used by Gravitee CI CD Orchestrator to authenticate to Circle CI
                    CCI_SECRET_FILE=$PWD/.secrets.json
                    secrethub read --out-file ${CCI_SECRET_FILE} ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/api/.secret.json
                    secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/secrethub-svc-account/token > ./.secrethub.credential
                    ls -allh ${CCI_SECRET_FILE}
                    # Docker volumes to map pipeline checked out git tree, .env file and .secrets.json files inside the docker container
                    # export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.env:/graviteeio/cicd/.env -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json"
                    export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json -v $PWD/.secrethub.credential:/graviteeio/cicd/.secrethub.credential"
                    export ENV_VARS="--env GH_ORG=${GITHUB_ORG} --env SECRETHUB_ORG=${SECRETHUB_ORG} --env SECRETHUB_REPO=${SECRETHUB_REPO} --env MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    docker run --name orchestrator ${ENV_VARS} ${DOCKER_VOLUMES} --restart no -it quay.io/gravitee-lab/cicd-orchestrator:stable-latest -s mvn_release --dry-run
                    exit "$?"

  run_orchestrator:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      SECRETHUB_ORG: graviteeio
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - gravitee/nexus_staging_prepare_bucket:
          dry_run: false
          maven_container_image_tag: stable-latest
          maven_profile_id: gio-release
          secrethub_org: graviteeio
          secrethub_repo: cicd
      - run:
          name: "Docker pull"
          command: |
                    docker pull quay.io/gravitee-lab/cicd-orchestrator:stable-latest
      - run:
          name: "Running the Gio CICD Orchestrator as docker container"
          command: |
                    echo "Checking pipeline env. : "
                    ls -allh
                    export GITHUB_ORG=gravitee-io
                    export SECRETHUB_ORG=graviteeio
                    export SECRETHUB_REPO=cicd
                    export MAVEN_PROFILE_ID='gio-release'
                    echo "GITHUB_ORG=${GITHUB_ORG}"
                    echo "SECRETHUB_ORG=${SECRETHUB_ORG}"
                    echo "SECRETHUB_REPO=${SECRETHUB_REPO}"
                    echo "MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    # checking docker image pulled in previous step is there
                    docker images
                    # --> .secrets.json is used by Gravitee CI CD Orchestrator to authenticate to Circle CI
                    CCI_SECRET_FILE=$PWD/.secrets.json
                    secrethub read --out-file ${CCI_SECRET_FILE} ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/api/.secret.json
                    secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/secrethub-svc-account/token > ./.secrethub.credential
                    ls -allh ${CCI_SECRET_FILE}
                    # Docker volumes to map pipeline checked out git tree, .env file and .secrets.json files inside the docker container
                    # export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.env:/graviteeio/cicd/.env -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json"
                    export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json -v $PWD/.secrethub.credential:/graviteeio/cicd/.secrethub.credential"
                    export ENV_VARS="--env GH_ORG=${GITHUB_ORG} --env SECRETHUB_ORG=${SECRETHUB_ORG} --env SECRETHUB_REPO=${SECRETHUB_REPO} --env MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    docker run --name orchestrator ${ENV_VARS} ${DOCKER_VOLUMES} --restart no -it quay.io/gravitee-lab/cicd-orchestrator:stable-latest -s mvn_release --dry-run false
                    exit "$?"

  orchestrated_nexus_staging:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      GIO_PRODUCT_VERSION: << pipeline.parameters.gio_release_version >>
      SECRETHUB_ORG: graviteeio
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "Go back to release"
          command: |
                    echo "Go back to Release version [${GIO_PRODUCT_VERSION}]"
                    git checkout ${GIO_PRODUCT_VERSION}
                    cat ./release.json
      - run:
          name: "Docker pull"
          command: |
                    docker pull quay.io/gravitee-lab/cicd-orchestrator:stable-latest
      - run:
          name: "Running the Gio CICD Orchestrator as docker container"
          command: |
                    echo "Checking pipeline env. : "
                    ls -allh
                    export GITHUB_ORG=gravitee-io
                    export SECRETHUB_ORG=graviteeio
                    export SECRETHUB_REPO=cicd
                    export MAVEN_PROFILE_ID='gravitee-release'
                    echo "GITHUB_ORG=${GITHUB_ORG}"
                    echo "SECRETHUB_ORG=${SECRETHUB_ORG}"
                    echo "SECRETHUB_REPO=${SECRETHUB_REPO}"
                    echo "MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    # checking docker image pulled in previous step is there
                    docker images
                    # --> .secrets.json is used by Gravitee CI CD Orchestrator to authenticate to Circle CI
                    CCI_SECRET_FILE=$PWD/.secrets.json
                    secrethub read --out-file ${CCI_SECRET_FILE} ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/api/.secret.json
                    secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/secrethub-svc-account/token > ./.secrethub.credential
                    ls -allh ${CCI_SECRET_FILE}
                    # Docker volumes to map pipeline checked out git tree, .env file and .secrets.json files inside the docker container
                    # export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.env:/graviteeio/cicd/.env -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json"
                    export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json -v $PWD/.secrethub.credential:/graviteeio/cicd/.secrethub.credential"
                    export ENV_VARS="--env GH_ORG=${GITHUB_ORG} --env SECRETHUB_ORG=${SECRETHUB_ORG} --env SECRETHUB_REPO=${SECRETHUB_REPO} --env MAVEN_PROFILE_ID=${MAVEN_PROFILE_ID}"
                    docker run --name orchestrator ${ENV_VARS} ${DOCKER_VOLUMES} --restart no -it quay.io/gravitee-lab/cicd-orchestrator:stable-latest -s mvn_nexus_staging --dry-run false
                    exit "$?"

  cicd_test_gpg_job1:
    docker:
     - image: 'cimg/base:stable'
    resource_class: medium
    # working_directory: /mnt/ramdisk
    environment:
      RELEASE_REPO: git@github.com:gravitee-lab/release-with-nexus-staging-test1
      SECRETHUB_ORG: graviteeio
      SECRETHUB_REPO: cicd
      # GIO_GPG_PUB_KEY: 'secrethub://gravitee-lab/cicd/graviteebot/gpg/pub_key'
      # GIO_GPG_PRV_KEY: 'secrethub://gravitee-lab/cicd/graviteebot/gpg/private_key'
      GIO_GPG_PUB_KEY: 'secrethub://graviteeio/cicd/graviteebot/gpg/armor_format_pub_key'
      GIO_GPG_PRV_KEY: 'secrethub://graviteeio/cicd/graviteebot/gpg/armor_format_private_key'
    steps:
      - secrethub/exec:
          command: |
                    mkdir -p /tmp/graviteebot/.secrets/.gungpg

                    # echo -e $GIO_GPG_PUB_KEY | base64 -d > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    # echo -e $GIO_GPG_PRV_KEY | base64 -d > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key

                    # echo $GIO_GPG_PUB_KEY | base64 -d > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    # echo $GIO_GPG_PRV_KEY | base64 -d > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key

                    # echo -e "$GIO_GPG_PUB_KEY" > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    # echo -e "$GIO_GPG_PRV_KEY" > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key

                    echo $GIO_GPG_PUB_KEY > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    echo $GIO_GPG_PRV_KEY > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key

                    echo " content of gpg public key : "

                    cat /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key

                    echo ""
                    echo ""


                    # export EPHEMERAL_KEYRING_FOLDER_ZERO=$(mktemp -d -t "gpg_home-XXXXXXXXXX")
                    export EPHEMERAL_KEYRING_FOLDER_ZERO="/tmp/graviteebot/ephemeral_gpg_ring"
                    mkdir -p ${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    chmod 700 ${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    export GNUPGHOME=${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    echo "GPG Keys before import : "
                    # This will generate a new Key ring into ${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    gpg --list-keys
                    echo "content of [\${EPHEMERAL_KEYRING_FOLDER_ZERO}]=[${EPHEMERAL_KEYRING_FOLDER_ZERO}] : "
                    ls -allh ${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    exit 0

      - persist_to_workspace:
          root: /tmp
          paths:
            - graviteebot
            # - graviteebot/ephemeral_gpg_ring

  cicd_test_gpg_job2:
    docker:
     - image: 'cimg/base:stable'
    resource_class: medium
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: "Retrieving GPG config from workspace"
          command: |
                    echo "Checking content of [/tmp]"
                    ls -allh /tmp/
                    echo "Checking content of [/tmp/graviteebot/.secrets/.gungpg/]"
                    ls -allh /tmp/graviteebot/.secrets/.gungpg/

                    export EPHEMERAL_KEYRING_FOLDER_ZERO="/tmp/graviteebot/ephemeral_gpg_ring"
                    echo "Checking content of EPHEMERAL_KEYRING_FOLDER_ZERO=[${EPHEMERAL_KEYRING_FOLDER_ZERO}]"
                    ls -allh ${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    export GNUPGHOME=${EPHEMERAL_KEYRING_FOLDER_ZERO}
                    mkdir -p ${GNUPGHOME}
                    echo "GPG init keyring : "
                    gpg --list-keys
                    echo "Checking content of GNUPGHOME=[${GNUPGHOME}]"
                    ls -allh ${GNUPGHOME}

                    export PUB_KEY_CONTENT=$(cat /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key | awk -F '-----BEGIN PGP PUBLIC KEY BLOCK-----' '{print $2}' | awk -F '-----END PGP PUBLIC KEY BLOCK-----' '{print $1}')
                    echo '-----BEGIN PGP PUBLIC KEY BLOCK-----' > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    echo "$PUB_KEY_CONTENT" | tr ' ' '\n' | tee -a /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    sed -i '$ s/$/-----END PGP PUBLIC KEY BLOCK-----/' /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key

                    export PRIV_KEY_CONTENT=$(cat /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key | awk -F '-----BEGIN PGP PRIVATE KEY BLOCK-----' '{print $2}' | awk -F '-----END PGP PUBLIC KEY BLOCK-----' '{print $1}')
                    echo '-----BEGIN PGP PRIVATE KEY BLOCK-----' > /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key
                    echo "$PRIV_KEY_CONTENT" | tr ' ' '\n' | tee -a /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key
                    sed -i '$ s/$/-----END PGP PRIVATE KEY BLOCK-----/' /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key


                    # echo '-----BEGIN PGP PUBLIC KEY BLOCK-----'
                    # echo '-----END PGP PUBLIC KEY BLOCK-----'
                    # echo '-----BEGIN PGP PRIVATE KEY BLOCK-----'
                    # echo '-----END PGP PRIVATE KEY BLOCK-----'


                    echo " content of gpg public key : "

                    cat -E /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    echo "# --- quick test import of pub key"
                    gpg --import /tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key
                    gpg --version

      - gravitee/gpg_config:
          gnupghome_path: "/tmp/graviteebot/ephemeral_gpg_ring"
          path_to_gpg_pub_key_file: "/tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.pub.key"
          path_to_gpg_private_key_file: "/tmp/graviteebot/.secrets/.gungpg/graviteebot.gpg.priv.key"
          gpg_signing_key_id: 870B61A8E14DC301

workflows:
  version: 2.1
  # Blank process invoked when pull requests events are triggered
  blank:
    when:
      equal: [ blank, << pipeline.parameters.gio_action >> ]
    jobs:
      - empty_job:
          context: cicd-orchestrator
  dry_release_process:
    when:
      equal: [ dry_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - dry_run_orchestrator:
          context: cicd-orchestrator
          filters:
            branches:
              only:
                - /^[0-9]+.[0-9]+.x/ # e.g. 4.5.x
                - /^[0-9]+.[0-9]+.[0-9]+-beta/ # e.g. 3.0.0-beta
                - master
  release_process:
    when:
      equal: [ release, << pipeline.parameters.gio_action >> ]
    jobs:
      - run_orchestrator:
          context: cicd-orchestrator
          filters:
            branches:
              only:
                - /^[0-9]+.[0-9]+.x/ # e.g. 4.5.x
                - /^[0-9]+.[0-9]+.[0-9]+-beta/ # e.g. 3.0.0-beta
                - master
  nexus_staging_workflow:
    when:
      equal: [ nexus_staging, << pipeline.parameters.gio_action >> ]
    jobs:
      - orchestrated_nexus_staging:
          context: cicd-orchestrator
          filters:
            tags:
              only:
                - /^[0-9]+.[0-9]+.[0-9]+/

  publish_bundles:
    when:
      equal: [ publish_bundles, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/publish_bundles:
          context: cicd-orchestrator
          secrethub_org: graviteeio
          secrethub_repo: cicd
          gio_release_version: << pipeline.parameters.gio_release_version >>
          artifactory_repo_name: "nexus-and-non-dry-run-releases"
          ae_version: << pipeline.parameters.ae_version >>
          license_version: << pipeline.parameters.license_version >>
          notifier_slack_version: << pipeline.parameters.notifier_slack_version >>
          notifier_webhook_version: << pipeline.parameters.notifier_webhook_version >>
          notifier_email_version: << pipeline.parameters.notifier_email_version >>
          with_ee: << pipeline.parameters.with_ee >>

  publish_rpms:
    when:
      equal: [ publish_rpms, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/publish_apim_rpms:
          context: cicd-orchestrator
          secrethub_org: graviteeio
          secrethub_repo: cicd
          gio_release_version: << pipeline.parameters.gio_release_version >>

  publish_docs:
    when:
      equal: [ publish_docs, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/publish_docs:
          context: cicd-orchestrator
          dry_run: << pipeline.parameters.dry_run >>
          secrethub_org: graviteeio
          secrethub_repo: cicd
          gio_release_version: << pipeline.parameters.gio_release_version >>
          # pr_source_branch_root: "develop"
          # pr_target_branch: "master"

  cicd_test_gpg_wf:
    when:
      equal: [ cicd_test_gpg, << pipeline.parameters.gio_action >> ]
    jobs:
      - cicd_test_gpg_job1:
          context: cicd-orchestrator
      - cicd_test_gpg_job2:
          requires:
            - cicd_test_gpg_job1
          context: cicd-orchestrator
